#include <@ACADO_COMMON_HEADER@>

#include "qpOASES_e/@SOLVER_NAME@.h"

#if ACADO_COMPUTE_COVARIANCE_MATRIX == 1
#include "INCLUDE/EXTRAS/SolutionAnalysis.hpp"
#endif // ACADO_COMPUTE_COVARIANCE_MATRIX

static int @PREFIX@nWSR;

@USE_NAMESPACE@

#if ACADO_COMPUTE_COVARIANCE_MATRIX == 1
static SolutionAnalysis sa;
#endif // ACADO_COMPUTE_COVARIANCE_MATRIX

int @PREFIX@solve( void )
{

	returnValue retVal;
	@SOLVER_NAME@ qp;
	Options options;

	@PREFIX@nWSR = QPOASES_NWSRMAX;

	@CTOR@;
	Options_setToMPC( &options );
	@SOLVER_NAME@_setOptions( &qp,options );
	
	retVal = @SOLVER_NAME@_@CALL_SOLVER@
	retVal = qpOASES_getSimpleStatus( retVal,0 );

    /* only use solution on success, if iteration limit has been reached or if QP is infeasible! */
    if ( ( retVal == 0 ) || ( retVal == 1 ) || ( retVal == -2 ) )
    {
        @SOLVER_NAME@_getPrimalSolution( &qp,@PRIMAL_SOLUTION@ );
        @SOLVER_NAME@_getDualSolution( &qp,@DUAL_SOLUTION@ );
    }
	
#if ACADO_COMPUTE_COVARIANCE_MATRIX == 1

	return (int)retVal;
}

int @PREFIX@getNWSR( void )
{
	return nWSR;
}

const char* @PREFIX@getErrorString(int error)
{
	return MessageHandling_getErrorCodeMessage( qpOASES_getGlobalMessageHandler(),error );
}
