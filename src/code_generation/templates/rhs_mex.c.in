#include "mex.h"
#include <stdio.h>

/* GLOBAL VARIABLES FOR THE ACADO REAL-TIME ALGORITHM: */
/* --------------------------------------------------- */
   ACADOvariables acadoVariables;
   ACADOworkspace acadoWorkspace;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {

    int i;
    int Nx, Nt, Nu, Np;
    real_t *f, *x, *u, *p;
    real_t y[ACADO_NX+ACADO_NXA+ACADO_NU+ACADO_NOD+ACADO_NXD];
    
    if (nrhs != 2+(ACADO_NU>0)+(ACADO_NOD>0)) {
		char errMsg[80];
		sprintf(errMsg, "Check the number of input arguments! (received: %d, expected: %d)", nrhs, 2+(ACADO_NU>0)+(ACADO_NOD>0));
        mexErrMsgTxt( errMsg );
    }
    if (nlhs > 1) {
		char errMsg[80];
		sprintf(errMsg, "Check the number of output arguments! (received: %d, expected: %d)", nlhs, 1);
        mexErrMsgTxt( errMsg );
    }
    
    Nt = mxGetM(prhs[0])*mxGetN(prhs[0]);
    Nx = mxGetM(prhs[1])*mxGetN(prhs[1]);
    #if ACADO_NU > 0
        Nu = mxGetM(prhs[2])*mxGetN(prhs[2]);
    #else
        Nu = 0;
    #endif
    #if ACADO_NOD > 0
        Np = mxGetM(prhs[3])*mxGetN(prhs[3]);
    #else
        Np = 0;
    #endif
    
    if (Nt != 1) {
		char errMsg[80];
		sprintf(errMsg, "Check the dimension of the first input argument! (received: %d, expected: %d)", Nt, 1);
        mexErrMsgTxt( errMsg );
    }
    if (Nx != ACADO_NX+ACADO_NXA+ACADO_NXD) {
		char errMsg[80];
		sprintf(errMsg, "Check the dimension of the second input argument! (received: %d, expected: %d)", Nx, ACADO_NX+ACADO_NXA+ACADO_NXD);
        mexErrMsgTxt( errMsg );
    }
    if (Nu != ACADO_NU) {
		char errMsg[80];
		sprintf(errMsg, "Check the dimension of the control input argument! (received: %d, expected: %d)", Nu, ACADO_NU);
        mexErrMsgTxt( errMsg );
    }
    if (Np != ACADO_NOD) {
		char errMsg[80];
		sprintf(errMsg, "Check the dimension of the online data argument! (received: %d, expected: %d)", Np, ACADO_NOD);
        mexErrMsgTxt( errMsg );
    }
    
    x = mxGetPr(prhs[1]);
    #if ACADO_NU > 0
        u = mxGetPr(prhs[2]);
    #endif
    #if ACADO_NOD > 0
        p = mxGetPr(prhs[3]);
    #endif
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        y[i] = x[i];
    }
    for( i = 0; i < ACADO_NU; ++i ) {
        y[ACADO_NX+ACADO_NXA+i] = u[i];
    }
    for( i = 0; i < ACADO_NOD; ++i ) {
        y[ACADO_NX+ACADO_NXA+ACADO_NU+i] = p[i];
    }
    for( i = 0; i < ACADO_NXD; ++i ) {
        y[ACADO_NX+ACADO_NXA+ACADO_NU+ACADO_NOD+i] = x[ACADO_NX+ACADO_NXA+i];
    }
    
    plhs[0] = mxCreateDoubleMatrix(ACADO_NX+ACADO_NXA+ACADO_NXD,1,mxREAL);
    f = mxGetPr(plhs[0]);
    
    @ACADO_RHS@( y,f );

    for( i = 0; i < ACADO_NXD; ++i ) {
        f[ACADO_NX+ACADO_NXA+i] = f[i];
    }
    for( i = 0; i < ACADO_NXD; ++i ) {
        f[i] = x[ACADO_NX+ACADO_NXA+i];
    }
}

