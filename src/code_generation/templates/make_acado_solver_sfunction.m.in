%% Legacy code wrapper for the ACADO CGT generated OCP solver

% Dimensions
ACADO_N   = @N@;
ACADO_NX  = @NX@;
ACADO_NDX = @NDX@;
ACADO_NXA = @NXA@;
ACADO_NU  = @NU@;
ACADO_NP  = @NP@;
ACADO_NY  = @NY@;
ACADO_NYN = @NYN@;

ACADO_INITIAL_STATE_FIXED         = @INIT_STATE_FIXED@;
ACADO_WEIGHTING_MATRICES_TYPE     = @WEIGHT_MATRIX_TYPE@;
ACADO_HARDCODED_CONSTRAINT_VALUES = @HARCODED_CONSTRAINTS@;
ACADO_USE_ARRIVAL_COST            = @ARRIVAL_COST@;
ACADO_COMPUTE_COVARIANCE_MATRIX   = @COV_MATRIX@;

aSfunName  = '@MODULE_NAME@_solver_sfun';
aRealT     = '@REAL_TYPE@';
aHeaderFile = '@MODULE_NAME@_solver_sfunction.h';

%% Define busses

clear avCells aInput aOutput @MODULE_NAME@data @MODULE_NAME@input @MODULE_NAME@output;

% Define ACADOvariables bus:
avCells = {'@MODULE_NAME@data', aHeaderFile, '', 'Auto', '-1', {}};

idx = 1;
avCells{ 6 }{ idx } = {'x', [1, (ACADO_N + 1) * ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1; 
avCells{ 6 }{ idx } = {'u', [1, ACADO_N * ACADO_NU], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;

if ACADO_NXA > 0
    avCells{ 6 }{ idx } = {'z', [1, ACADO_N * ACADO_NXA], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if ACADO_NP > 0
    avCells{ 6 }{ idx } = {'p', [1, ACADO_NP], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

avCells{ 6 }{ idx } = {'y', [1, ACADO_N * ACADO_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1; 
avCells{ 6 }{ idx } = {'yN', [1, ACADO_NYN], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;

if ACADO_WEIGHTING_MATRICES_TYPE == 1
    avCells{ 6 }{ idx } = {'W', [1, ACADO_NY * ACADO_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
elseif ACADO_WEIGHTING_MATRICES_TYPE == 2
    avCells{ 6 }{ idx } = {'W', [1, ACADO_NY * ACADO_N * ACADO_NY], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if ACADO_WEIGHTING_MATRICES_TYPE ~= 0
    avCells{ 6 }{ idx } = {'WN', [1, ACADO_NYN * ACADO_NYN], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if ACADO_USE_ARRIVAL_COST == 1
	avCells{ 6 }{ idx } = {'xAC', [1, ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
	avCells{ 6 }{ idx } = {'SAC', [1, ACADO_NX * ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
	avCells{ 6 }{ idx } = {'WL', [1, ACADO_NX * ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if ACADO_INITIAL_STATE_FIXED == 1
    avCells{ 6 }{ idx } = {'x0', [1, ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

if ACADO_COMPUTE_COVARIANCE_MATRIX == 1
    avCells{ 6 }{ idx } = {'sigmaN', [1, ACADO_NX * ACADO_NX], aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; idx = idx + 1;
end;

% Define input bus for the Simulink component:
aInput = { ...
	'@MODULE_NAME@input', aHeaderFile, '', ...
	{
		{'control', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'shifting', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'initialization', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'data', 1, '@MODULE_NAME@data', -1, 'real', 'Sample', 'Fixed', [], []}; ...
	}
	};

% Define output bus for the Simulink component:
aOutput = { ...
	'@MODULE_NAME@output', aHeaderFile, '', ...
	{
		{'status', 1, 'int32', -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'kktValue', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'objValue', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'execTime', 1, aRealT, -1, 'real', 'Sample', 'Fixed', [], []}; ...
		{'data', 1, '@MODULE_NAME@data', -1, 'real', 'Sample', 'Fixed', [], []}; ...
	}
	};

% Generate all structures
Simulink.Bus.cellToObject( {avCells, aInput, aOutput} );

%% Define S-function wrapper

clear aDef;

aDef = legacy_code('initialize');

aDef.Options.language='C++';

% Define the S-function name
aDef.SFunctionName = aSfunName;

% Define source files
aDef.SourceFiles = { ...
	'qpoases/SRC/QProblem.cpp', ...
	'qpoases/SRC/QProblemB.cpp', ...
	'qpoases/SRC/Bounds.cpp', ...
	'qpoases/SRC/Constraints.cpp', ...
	'qpoases/SRC/SubjectTo.cpp', ...
	'qpoases/SRC/Indexlist.cpp', ...
	'qpoases/SRC/CyclingManager.cpp', ...
	'qpoases/SRC/Utils.cpp', ...
	'qpoases/SRC/MessageHandling.cpp', ...
	'qpoases/SRC/EXTRAS/SolutionAnalysis.cpp' ...
	'@MODULE_NAME@_solver.c', ...
	'@MODULE_NAME@_integrator.c', ...
	'@MODULE_NAME@_auxiliary_functions.c', ...
	'@MODULE_NAME@_qpoases_interface.cpp', ...
	'@MODULE_NAME@_solver_sfunction.c' ...
	};

% Define header files
aDef.HeaderFiles = {'@MODULE_NAME@_common.h', aHeaderFile};

% Define include folders
aDef.IncPaths = { ...
    'qpoases', ...
	'qpoases/INCLUDE', ...
	'qpoases/SRC' ...
	};

% link against some libs maybe
ldFlags = '';
if (isunix() && ~ismac())
	ldFlags = [ldFlags ' -lrt'];
end;

% Define output function declaration
aDef.OutputFcnSpec = [ ...
	'@MODULE_NAME@_solver_wrapper(' ... % Wrapper function name
	'@MODULE_NAME@input u1[1], ' ...	% Input argument
	'@MODULE_NAME@output y1[1])' ...	% Output argument
	];

%% Generate S-function source file
legacy_code('sfcn_cmex_generate', aDef);

%% Compile the code
legacy_code('compile', aDef, ldFlags);

%% Generate a TLC file and simulation block
legacy_code('slblock_generate', aDef);
legacy_code('sfcn_tlc_generate', aDef);
% Mandatory, because not all the source and header files are in the same folder
legacy_code('rtwmakecfg_generate', aDef);

%% Remove dependency on the header file and regenerate the Simulink structures

avCells{ 2 } = '';
aInput{ 2 } = '';
aOutput{ 2 } = '';

% Generate all structures
Simulink.Bus.cellToObject( {avCells, aInput, aOutput} );

%% Clear byproducts
clear aInput aOutput avCells idx ldFlags aSfunName aRealT aHeaderFile;
